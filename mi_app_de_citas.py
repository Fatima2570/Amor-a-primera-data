# -*- coding: utf-8 -*-
"""mi_app_de_citas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UcvVKqphG_csJ7ktFoZMXD7ONxvX0zAn
"""

pip install streamlit

import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="💘 Amor A Primera Data 💘")

st.title("💘 Amor A Primera Data 💘")
st.caption("Encuentra el match perfecto basado en tus gustos, valores y estilo de vida.")

# Ruta de la base de datos
DATA_PATH = "/content/drive/MyDrive/match_data.csv"

# Cargar o crear base de datos
try:
    db = pd.read_csv(DATA_PATH)
except FileNotFoundError:
    db = pd.DataFrame(columns=[
        'Correo', 'Nombre', 'Edad', 'Género', 'Género_Buscado', 'Signo',
        'Instagram', 'Relación', 'Hobbies', 'Hijos', 'Altura',
        'Altura_Buscada', 'Religión', 'Universidad', 'Carrera', 'Rango_Edad'
    ])
    db.to_csv(DATA_PATH, index=False)

# Compatibilidad zodiacal básica
compat_zodiaco = {
    "Aries": ["Leo", "Sagitario", "Géminis"],
    "Tauro": ["Virgo", "Capricornio", "Cáncer"],
    "Géminis": ["Libra", "Acuario", "Aries"],
    "Cáncer": ["Escorpio", "Piscis", "Tauro"],
    "Leo": ["Aries", "Sagitario", "Libra"],
    "Virgo": ["Tauro", "Capricornio", "Escorpio"],
    "Libra": ["Géminis", "Acuario", "Leo"],
    "Escorpio": ["Cáncer", "Piscis", "Virgo"],
    "Sagitario": ["Aries", "Leo", "Acuario"],
    "Capricornio": ["Tauro", "Virgo", "Piscis"],
    "Acuario": ["Géminis", "Libra", "Sagitario"],
    "Piscis": ["Cáncer", "Escorpio", "Capricornio"]
}

def calcular_compatibilidad(persona, user_data):
    puntos = 0
    if user_data['Género'] in persona["Género_Buscado"].split(";") and persona["Género"] in user_data['Género_Buscado'].split(";"):
        puntos += 1
    if persona["Relación"] == user_data['Relación']:
        puntos += 1
    if persona["Hijos"] == user_data['Hijos']:
        puntos += 1
    if user_data['Religión'] == persona["Religión"]:
        puntos += 1
    if user_data['Signo'] in compat_zodiaco.get(persona["Signo"], []):
        puntos += 1
    if user_data['Altura_Buscada'] == "Misma altura" and abs(user_data['Altura'] - persona["Altura"]) <= 5:
        puntos += 1
    elif user_data['Altura_Buscada'] == "Más alto" and persona["Altura"] > user_data['Altura']:
        puntos += 1
    elif user_data['Altura_Buscada'] == "Más bajo" and persona["Altura"] < user_data['Altura']:
        puntos += 1
    hobbies_en_comun = set(user_data['Hobbies'].split(";")).intersection(set(persona["Hobbies"].split(";")))
    puntos += len(hobbies_en_comun)
    edad_dif = int(persona["Edad"]) - int(user_data['Edad'])
    if user_data['Rango_Edad'] == "Misma edad" and abs(edad_dif) == 0:
        puntos += 1
    elif user_data['Rango_Edad'] == "Hasta 5 años más" and 0 < edad_dif <= 5:
        puntos += 1
    elif user_data['Rango_Edad'] == "Hasta 5 años menos" and -5 <= edad_dif < 0:
        puntos += 1
    return puntos

def mostrar_matches(correo):
    usuario = db[db['Correo'] == correo]
    if usuario.empty:
        st.warning("⚠️ No encontramos tu correo en nuestra base de datos.")
        return

    user_data = usuario.iloc[0].to_dict()
    posibles_matches = db[db["Correo"] != correo].copy()

    if posibles_matches.empty:
        st.info("Aún no hay más personas registradas. ¡Invita a tus amig@s!")
        return

    posibles_matches["compatibilidad"] = posibles_matches.apply(lambda x: calcular_compatibilidad(x, user_data), axis=1)
    mejores = posibles_matches[posibles_matches["compatibilidad"] >= 4].sort_values("compatibilidad", ascending=False)

    if not mejores.empty:
        st.markdown("### 💝 ¡Tus matches compatibles!")
        for _, match in mejores.iterrows():
            st.markdown(f"**👤 Nombre:** {match['Nombre']}  \n"
                        f"🎓 Universidad: {match['Universidad']}  \n"
                        f"📚 Carrera: {match['Carrera']}  \n"
                        f"📲 Instagram: {match['Instagram']}  \n"
                        f"🌟 Compatibilidad: {match['compatibilidad']} puntos")
    else:
        st.info("Todavía no hay personas que hagan match contigo. ¡Pronto llegará alguien!")

# Elegir modo
modo = st.radio("¿Qué deseas hacer?", ["Completar formulario", "Ver mis matches anteriores"])

if modo == "Ver mis matches anteriores":
    correo_consulta = st.text_input("Ingresa tu correo para ver tus matches")
    if st.button("Ver matches"):
        mostrar_matches(correo_consulta)

else:
    st.subheader("📋 Completa tu perfil")

    with st.form("form_usuario"):
        correo = st.text_input("Correo electrónico (usado para evitar duplicados)", placeholder="ejemplo@gmail.com")
        nombre = st.text_input("Nombre")
        edad = st.slider("Edad", 18, 60)

        genero = st.selectbox("¿Con qué género te identificas?", ["Hombre", "Mujer", "Otro"])
        genero_buscado = st.multiselect("¿Qué género(s) buscas?", ["Hombre", "Mujer"])

        signo = st.selectbox("Signo zodiacal", [
            "Aries", "Tauro", "Géminis", "Cáncer", "Leo", "Virgo",
            "Libra", "Escorpio", "Sagitario", "Capricornio", "Acuario", "Piscis"
        ])

        instagram = st.text_input("Tu Instagram (opcional)")
        relacion = st.radio("¿Qué tipo de relación buscas?", ["Seria", "Casual"])

        hobbies = st.multiselect("Selecciona tus hobbies", [
            "Leer", "Bailar", "Cocinar", "Viajar", "Jugar videojuegos", "Hacer deporte",
            "Ver películas", "Escuchar música", "Escribir", "Arte", "Naturaleza"
        ])

        hijos = st.radio("¿Quieres tener hijos?", ["Sí", "No"])
        altura = st.number_input("¿Cuál es tu altura? (en cm)", min_value=100, max_value=250)
        altura_buscada = st.selectbox("¿Qué altura prefieres en tu pareja?", [
            "Misma altura", "Más alto", "Más bajo"
        ])

        religion = st.selectbox("¿Cuál es tu religión?", ["Creyente", "Ateo", "Agnóstico"])
        universidad = st.text_input("¿En qué universidad o instituto estudias?")
        carrera = st.text_input("¿Qué carrera estudias?")

        rango_edad = st.selectbox("¿Qué rango de edad aceptarías para tu pareja?", [
            "Misma edad", "Hasta 5 años más", "Hasta 5 años menos"
        ])

        submit = st.form_submit_button("Buscar pareja 💘")

    if submit:
        if correo in db["Correo"].values:
            st.warning("⚠️ Ya hay una cuenta registrada con este correo. Si quieres ver tus matches, usa la opción correspondiente arriba.")
        else:
            nuevo_usuario = {
                "Correo": correo,
                "Nombre": nombre,
                "Edad": edad,
                "Género": genero,
                "Género_Buscado": ";".join(genero_buscado),
                "Signo": signo,
                "Instagram": instagram,
                "Relación": relacion,
                "Hobbies": ";".join(hobbies),
                "Hijos": hijos,
                "Altura": altura,
                "Altura_Buscada": altura_buscada,
                "Religión": religion,
                "Universidad": universidad,
                "Carrera": carrera,
                "Rango_Edad": rango_edad
            }

            db = db.append(nuevo_usuario, ignore_index=True)
            db.to_csv(DATA_PATH, index=False)
            st.success("✅ ¡Tu información ha sido registrada correctamente!")
            mostrar_matches(correo)